// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcChatClient is the client API for GrpcChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcChatClient interface {
	// Create room for conversation
	CreateRoom(ctx context.Context, in *UserRoomByName, opts ...grpc.CallOption) (*Room, error)
	// Join existing room
	JoinRoom(ctx context.Context, in *UserRoomById, opts ...grpc.CallOption) (*Room, error)
	// Leave room
	LeaveRoom(ctx context.Context, in *UserRoomById, opts ...grpc.CallOption) (*Room, error)
	// Get existing rooms
	GetRooms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Rooms, error)
	// Get id of last message in a room
	GetLastMessageId(ctx context.Context, in *RoomId, opts ...grpc.CallOption) (*MessageId, error)
	// Send message
	SendMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*Empty, error)
	// Poll messages
	GetMessages(ctx context.Context, in *RoomMessageId, opts ...grpc.CallOption) (GrpcChat_GetMessagesClient, error)
}

type grpcChatClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcChatClient(cc grpc.ClientConnInterface) GrpcChatClient {
	return &grpcChatClient{cc}
}

func (c *grpcChatClient) CreateRoom(ctx context.Context, in *UserRoomByName, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/grpc_chat.GrpcChat/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcChatClient) JoinRoom(ctx context.Context, in *UserRoomById, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/grpc_chat.GrpcChat/JoinRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcChatClient) LeaveRoom(ctx context.Context, in *UserRoomById, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/grpc_chat.GrpcChat/LeaveRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcChatClient) GetRooms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Rooms, error) {
	out := new(Rooms)
	err := c.cc.Invoke(ctx, "/grpc_chat.GrpcChat/GetRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcChatClient) GetLastMessageId(ctx context.Context, in *RoomId, opts ...grpc.CallOption) (*MessageId, error) {
	out := new(MessageId)
	err := c.cc.Invoke(ctx, "/grpc_chat.GrpcChat/GetLastMessageId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcChatClient) SendMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc_chat.GrpcChat/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcChatClient) GetMessages(ctx context.Context, in *RoomMessageId, opts ...grpc.CallOption) (GrpcChat_GetMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcChat_ServiceDesc.Streams[0], "/grpc_chat.GrpcChat/GetMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcChatGetMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcChat_GetMessagesClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type grpcChatGetMessagesClient struct {
	grpc.ClientStream
}

func (x *grpcChatGetMessagesClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcChatServer is the server API for GrpcChat service.
// All implementations must embed UnimplementedGrpcChatServer
// for forward compatibility
type GrpcChatServer interface {
	// Create room for conversation
	CreateRoom(context.Context, *UserRoomByName) (*Room, error)
	// Join existing room
	JoinRoom(context.Context, *UserRoomById) (*Room, error)
	// Leave room
	LeaveRoom(context.Context, *UserRoomById) (*Room, error)
	// Get existing rooms
	GetRooms(context.Context, *Empty) (*Rooms, error)
	// Get id of last message in a room
	GetLastMessageId(context.Context, *RoomId) (*MessageId, error)
	// Send message
	SendMessage(context.Context, *ChatMessage) (*Empty, error)
	// Poll messages
	GetMessages(*RoomMessageId, GrpcChat_GetMessagesServer) error
	mustEmbedUnimplementedGrpcChatServer()
}

// UnimplementedGrpcChatServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcChatServer struct {
}

func (UnimplementedGrpcChatServer) CreateRoom(context.Context, *UserRoomByName) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedGrpcChatServer) JoinRoom(context.Context, *UserRoomById) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedGrpcChatServer) LeaveRoom(context.Context, *UserRoomById) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveRoom not implemented")
}
func (UnimplementedGrpcChatServer) GetRooms(context.Context, *Empty) (*Rooms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRooms not implemented")
}
func (UnimplementedGrpcChatServer) GetLastMessageId(context.Context, *RoomId) (*MessageId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastMessageId not implemented")
}
func (UnimplementedGrpcChatServer) SendMessage(context.Context, *ChatMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedGrpcChatServer) GetMessages(*RoomMessageId, GrpcChat_GetMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedGrpcChatServer) mustEmbedUnimplementedGrpcChatServer() {}

// UnsafeGrpcChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcChatServer will
// result in compilation errors.
type UnsafeGrpcChatServer interface {
	mustEmbedUnimplementedGrpcChatServer()
}

func RegisterGrpcChatServer(s grpc.ServiceRegistrar, srv GrpcChatServer) {
	s.RegisterService(&GrpcChat_ServiceDesc, srv)
}

func _GrpcChat_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoomByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcChatServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_chat.GrpcChat/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcChatServer).CreateRoom(ctx, req.(*UserRoomByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcChat_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoomById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcChatServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_chat.GrpcChat/JoinRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcChatServer).JoinRoom(ctx, req.(*UserRoomById))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcChat_LeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoomById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcChatServer).LeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_chat.GrpcChat/LeaveRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcChatServer).LeaveRoom(ctx, req.(*UserRoomById))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcChat_GetRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcChatServer).GetRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_chat.GrpcChat/GetRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcChatServer).GetRooms(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcChat_GetLastMessageId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcChatServer).GetLastMessageId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_chat.GrpcChat/GetLastMessageId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcChatServer).GetLastMessageId(ctx, req.(*RoomId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcChat_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcChatServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_chat.GrpcChat/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcChatServer).SendMessage(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcChat_GetMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RoomMessageId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcChatServer).GetMessages(m, &grpcChatGetMessagesServer{stream})
}

type GrpcChat_GetMessagesServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type grpcChatGetMessagesServer struct {
	grpc.ServerStream
}

func (x *grpcChatGetMessagesServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

// GrpcChat_ServiceDesc is the grpc.ServiceDesc for GrpcChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_chat.GrpcChat",
	HandlerType: (*GrpcChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _GrpcChat_CreateRoom_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _GrpcChat_JoinRoom_Handler,
		},
		{
			MethodName: "LeaveRoom",
			Handler:    _GrpcChat_LeaveRoom_Handler,
		},
		{
			MethodName: "GetRooms",
			Handler:    _GrpcChat_GetRooms_Handler,
		},
		{
			MethodName: "GetLastMessageId",
			Handler:    _GrpcChat_GetLastMessageId_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _GrpcChat_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMessages",
			Handler:       _GrpcChat_GetMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/grpc_chat.proto",
}
